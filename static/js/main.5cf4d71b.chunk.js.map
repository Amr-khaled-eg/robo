{"version":3,"sources":["comp/card.js","comp/cardList.js","comp/search.js","constants.js","comp/app.js","actions.js","reportWebVitals.js","reducers.js","registerServiceWorker.js","index.js"],"names":["Card","props","className","src","id","alt","name","mail","CardList","robots","map","el","i","email","Search","searchChange","type","placeholder","onChange","SET_SEARCH_FIELD","REQUST_ROBOTS_PENDING","REQUST_REBOTS_SUCCES","REQUST_REBOTS_FAILED","App","this","onGetRobots","search","onSearchChange","filterdRobots","filter","robot","toLocaleLowerCase","includes","React","Component","connect","state","searchRobots","getRobots","isPending","error","dispatch","event","text","target","value","payload","fetch","then","rawData","json","data","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialStateSearch","initialStateRobots","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"8MAaeA,EAXF,SAACC,GACZ,OACE,sBAAKC,UAAU,OAAf,UACE,qBAAKC,IAAG,+BAA0BF,EAAMG,GAAhC,YAA8CC,IAAI,UAC1D,gCACE,6BAAKJ,EAAMK,OACX,4BAAIL,EAAMM,cCIHC,EATE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAClB,OACE,qBAAKP,UAAU,OAAf,SACGO,EAAOC,KAAI,SAACC,EAAIC,GACf,OAAO,cAAC,EAAD,CAAcN,KAAMK,EAAGL,KAAMC,KAAMI,EAAGE,MAAOT,GAAIO,EAAGP,IAAzCQ,SCOXE,EAZA,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aAChB,OACE,qBAAKb,UAAU,SAAf,SACE,uBACEc,KAAK,SACLC,YAAY,YACZf,UAAU,YACVgB,SAAUH,O,OCTLI,EAAmB,mBACnBC,EAAwB,wBACxBC,EAAuB,uBACvBC,EAAuB,uBCkB9BC,E,uKACJ,WACEC,KAAKvB,MAAMwB,gB,oBAEb,WAAU,IAAD,EACoCD,KAAKvB,MAAxCyB,EADD,EACCA,OAAQC,EADT,EACSA,eACZC,EAFG,EACyBnB,OACLoB,QAAO,SAACC,GACjC,OAAOA,EAAMxB,KACVyB,oBACAC,SAASN,EAAOK,wBAGrB,OACE,gCACE,cAAC,EAAD,CAAQhB,aAAcY,IACtB,cAAC,EAAD,CAAUlB,OAAQmB,W,GAfRK,IAAMC,WAoBTC,eAlCS,SAACC,GACvB,MAAO,CACLV,OAAQU,EAAMC,aAAaX,OAC3BjB,OAAQ2B,EAAME,UAAU7B,OACxB8B,UAAWH,EAAME,UAAUC,UAC3BC,MAAOJ,EAAME,UAAUE,UAGA,SAACC,GAC1B,MAAO,CACLd,eAAgB,SAACe,GAAD,OAAWD,GCVAE,EDUwBD,EAAME,OAAOC,MCV3B,CACvC7B,KAAMG,EACN2B,QAASH,KAFmB,IAACA,GDW3BlB,YAAa,kBAAMgB,GCPW,SAACA,GACjCA,EAAS,CAAEzB,KAAMI,IACjB2B,MAAM,6CACHC,MAAK,SAACC,GAAD,OAAaA,EAAQC,UAC1BF,MAAK,SAACG,GACLV,EAAS,CAAEzB,KAAMK,EAAsByB,QAASK,OAEjDC,OAAM,SAACZ,GAAD,OAAWC,EAAS,CAAEzB,KAAMM,EAAsBwB,QAASN,cDuBvDL,CAA6CZ,GE7B7C8B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBP,MAAK,YAAkD,IAA/CQ,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,sBCDRO,EAAqB,CACzBnC,OAAQ,IAUJoC,EAAqB,CACzBvB,WAAW,EACX9B,OAAQ,GACR+B,MAAO,ICVHuB,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTtB,MAAK,SAAA0B,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBxC,QACfmC,UAAUC,cAAcO,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrB7B,OAAM,SAAAZ,GACLwC,QAAQxC,MAAM,4CAA6CA,MC7DjE,IAAM0C,EAAcC,YAAgB,CAAE9C,aFAV,WAA8C,IAA7CD,EAA4C,uDAApCyB,EAAoBuB,EAAgB,uDAAP,GAChE,OAAQA,EAAOpE,MACb,KAAKG,EACH,OAAO,2BAAKiB,GAAZ,IAAmBV,OAAQ0D,EAAOtC,UACpC,QACE,OAAOV,IELuCE,UFa3B,WAA8C,IAA7CF,EAA4C,uDAApC0B,EAAoBsB,EAAgB,uDAAP,GAC7D,OAAQA,EAAOpE,MACb,KAAKI,EACH,OAAO,2BAAKgB,GAAZ,IAAmBG,WAAW,IAChC,KAAKlB,EACH,OAAO,2BAAKe,GAAZ,IAAmB3B,OAAQ2E,EAAOtC,QAASP,WAAW,IACxD,KAAKjB,EACH,OAAO,2BAAKc,GAAZ,IAAmBI,MAAO4C,EAAOtC,QAASP,WAAW,IACvD,QACE,OAAOH,MErBPiD,EAAQC,YAAYJ,EAAaK,YAAgBC,MACvDC,IAASC,OACP,cAAC,IAAD,CAAUL,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFM,SAASC,eAAe,SDKX,WACb,GAA6C,kBAAmBrB,UAAW,CAGzE,GADkB,IAAIsB,IAAIC,QAAwB7B,OAAOC,UAC3C6B,SAAW9B,OAAOC,SAAS6B,OAIvC,OAGF9B,OAAO+B,iBAAiB,QAAQ,WAC9B,IAAM1B,EAAK,UAAMwB,QAAN,sBAEP/B,EAwCV,SAAiCO,GAE/BvB,MAAMuB,GACHtB,MAAK,SAAAiD,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C9B,UAAUC,cAAc8B,MAAMtD,MAAK,SAAA0B,GACjCA,EAAa6B,aAAavD,MAAK,WAC7BiB,OAAOC,SAASsC,eAKpBnC,EAAgBC,MAGnBlB,OAAM,WACL4B,QAAQC,IACN,oEA5DAwB,CAAwBnC,GAGxBD,EAAgBC,OClBxBoC,GACArD,K","file":"static/js/main.5cf4d71b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./main.css\";\r\nconst Card = (props) => {\r\n  return (\r\n    <div className=\"card\">\r\n      <img src={`https://robohash.org/${props.id}?200x200`} alt=\"robot\" />\r\n      <div>\r\n        <h2>{props.name}</h2>\r\n        <p>{props.mail}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./card.js\";\r\nimport \"./main.css\";\r\nconst CardList = ({ robots }) => {\r\n  return (\r\n    <div className=\"flex\">\r\n      {robots.map((el, i) => {\r\n        return <Card key={i} name={el.name} mail={el.email} id={el.id} />;\r\n      })}\r\n    </div>\r\n  );\r\n};\r\nexport default CardList;\r\n","import React from \"react\";\r\nimport \"./main.css\";\r\nconst Search = ({ searchChange }) => {\r\n  return (\r\n    <div className=\"search\">\r\n      <input\r\n        type=\"search\"\r\n        placeholder=\"Search...\"\r\n        className=\"searchBox\"\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\nexport default Search;\r\n","export const SET_SEARCH_FIELD = \"SET_SEARCH_FIELD\";\r\nexport const REQUST_ROBOTS_PENDING = \"REQUST_ROBOTS_PENDING\";\r\nexport const REQUST_REBOTS_SUCCES = \"REQUST_REBOTS_SUCCES\";\r\nexport const REQUST_REBOTS_FAILED = \"REQUST_REBOTS_FAILED\";\r\n","import React from \"react\";\r\nimport CardList from \"./cardList.js\";\r\nimport Search from \"./search.js\";\r\nimport robots from \"../robots.js\";\r\nimport { connect } from \"react-redux\";\r\nimport { setSearchField, requstRobots } from \"../actions\";\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    search: state.searchRobots.search,\r\n    robots: state.getRobots.robots,\r\n    isPending: state.getRobots.isPending,\r\n    error: state.getRobots.error,\r\n  };\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    onGetRobots: () => dispatch(requstRobots()),\r\n  };\r\n};\r\nclass App extends React.Component {\r\n  componentDidMount() {\r\n    this.props.onGetRobots();\r\n  }\r\n  render() {\r\n    const { search, onSearchChange, robots } = this.props;\r\n    let filterdRobots = robots.filter((robot) => {\r\n      return robot.name\r\n        .toLocaleLowerCase()\r\n        .includes(search.toLocaleLowerCase());\r\n    });\r\n\r\n    return (\r\n      <div>\r\n        <Search searchChange={onSearchChange} />\r\n        <CardList robots={filterdRobots} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import {\r\n  SET_SEARCH_FIELD,\r\n  REQUST_ROBOTS_PENDING,\r\n  REQUST_REBOTS_SUCCES,\r\n  REQUST_REBOTS_FAILED,\r\n} from \"./constants\";\r\n\r\nexport const setSearchField = (text) => ({\r\n  type: SET_SEARCH_FIELD,\r\n  payload: text,\r\n});\r\nexport const requstRobots = () => (dispatch) => {\r\n  dispatch({ type: REQUST_ROBOTS_PENDING });\r\n  fetch(\"http://jsonplaceholder.typicode.com/users\")\r\n    .then((rawData) => rawData.json())\r\n    .then((data) => {\r\n      dispatch({ type: REQUST_REBOTS_SUCCES, payload: data });\r\n    })\r\n    .catch((error) => dispatch({ type: REQUST_REBOTS_FAILED, payload: error }));\r\n};\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {\r\n  SET_SEARCH_FIELD,\r\n  REQUST_ROBOTS_PENDING,\r\n  REQUST_REBOTS_SUCCES,\r\n  REQUST_REBOTS_FAILED,\r\n} from \"./constants\";\r\nconst initialStateSearch = {\r\n  search: \"\",\r\n};\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n  switch (action.type) {\r\n    case SET_SEARCH_FIELD:\r\n      return { ...state, search: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nconst initialStateRobots = {\r\n  isPending: false,\r\n  robots: [],\r\n  error: \"\",\r\n};\r\nexport const getRobots = (state = initialStateRobots, action = {}) => {\r\n  switch (action.type) {\r\n    case REQUST_ROBOTS_PENDING:\r\n      return { ...state, isPending: true };\r\n    case REQUST_REBOTS_SUCCES:\r\n      return { ...state, robots: action.payload, isPending: false };\r\n    case REQUST_REBOTS_FAILED:\r\n      return { ...state, error: action.payload, isPending: false };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./comp/app\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport thunkMiddleware from \"redux-thunk\";\nimport { searchRobots, getRobots } from \"./reducers\";\nimport registerServiceWorker from \"./registerServiceWorker\";\nconst rootReducer = combineReducers({ searchRobots, getRobots });\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nregisterServiceWorker();\nreportWebVitals();\n"],"sourceRoot":""}